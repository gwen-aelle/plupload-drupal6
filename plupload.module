<?php

/**
 * Implementation of hook_field_settings_alter().
 */
function plupload_field_settings_alter(&$settings, $op, $field) {
  drupal_debug(get_defined_vars(), 'plupload_field_settings_alter vars');
  $field_type = isset($field['widget_type']) ? $field['widget_type'] : $field['type'];
  if ($field_type != 'filefield') {
    return;
  }

  // Add our new options to the list of settings to be saved.
  if ($op == 'save') {
    $settings = array_merge($settings, array('plupload_active_elements'));
  }

  // Add the additional settings to the form.
  if ($op == 'form') {
    $settings['plupload_active_elements'] = array(
      '#type' => 'select',
      '#options' => plupload_active_element_options(),
      '#title' => t('Resumable uploads'),
      '#default_value' => (int) $field['plupload_active_elements'],
      '#description' => t("This option adds resumable uploads via the plupload library. When in use, the maximum upload size specified above can be greater than PHP's maximum post and file upload sizes."),
    );
  }
}

function plupload_active_element_options() {
  return array(
    '0' => t('Skip this field'),
    '1' => t('Use resumable file uploads'),
  );
}

/**
 * Implementation of hook_elements().
 */
function plupload_elements() {
  $elements = array();

  foreach (plupload_filefield_widgets() as $widget_type => $widget) {
    $elements[$widget_type]['#after_build'][] = 'plupload_process';
    $elements[$widget_type]['#element_validate'][] = 'plupload_validate';
  }

  //dsm($elements, 'filefield_elements() $elements=');
  return $elements;
}

// TODO do something useful on preview; currently this just silently drops any uploaded files so previewing is disabled
function plupload_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form' && isset($form['#field_info'])) {
    foreach ($form['#field_info'] as $field_name => $field_info) {
      if (isset($field_info['plupload_active_elements']) && $field_info['plupload_active_elements'] == TRUE) {
        unset($form['buttons']['preview']);
      }
    }
  }
}

function plupload_filefield_widgets() {
  static $filefield_widgets = NULL;
  if (!isset($filefield_widgets)) {
    $filefield_widgets = array();
    foreach (_content_widget_types() as $key => $widget) {
      if (in_array('filefield', $widget['field types'])) {
        $filefield_widgets[$key] = $widget['label'];
      }
    }
  }
  return $filefield_widgets;
}

function plupload_validate(&$element, &$form_state) {
  global $user;

  $field = content_fields($element['#field_name'], $element['#type_name']);
  $widget = $field['widget'];

  dsm(array('$element' => $element, '$form_state' => $form_state, '$field' => $field, '$widget' => $widget, '$_POST' => $_POST), 'plupload_validate()');
  $field_id = 'uploader-' . str_replace('_', '-', $element['#field_name']);
  if (isset($_POST[$field_id . '_count']) && $_POST[$field_id . '_count']) {
    $plupload_dir = '/tmp/plupload';
    if (!file_check_directory($plupload_dir, $mode = FILE_CREATE_DIRECTORY)) {
      drupal_set_message("Failed to create temporary upload directory $plupload_dir", 'error');
    }
    for ($i=0; $i<$_POST[$field_id . '_count']; $i++) {
      if (isset($form_state['plupload_file_moved'][$i]) || $form_state['clicked_button']['#id'] == 'edit-preview') {
        continue;
      }
      $filename = $_POST[$field_id . '_' . $i . '_name'];
      $sessionid = $_POST[] //TODO get info from post
      $uploadid = $_POST[] //TODO get info from post
      // security check (note: changing this requires also changing upload.php)
      $filename = preg_replace('/[^\w\._]+/', '_', $filename);

      // hash filename (note: changing this requires also changing upload.php)
      $filename = hash('md5', $filename . $sessionid . $uploadid);

      $filename = $plupload_dir . '/' . $filename;
      $destination_dir = file_directory_path();
      if (isset($widget['file_path'])) {
        $destination_dir .= '/' . $widget['file_path'];
        if (!file_check_directory($destination_dir, $mode = FILE_CREATE_DIRECTORY)) {
          drupal_set_message("Failed to create destination directory $destination_dir", 'error');
        }
      }
      $name = basename($filename);
      if (!file_move($filename, $destination_dir, FILE_EXISTS_RENAME)) {
        drupal_set_message("Failed to move file: $filename", 'error');
      }
      else {
        $file_details = stat($filename);
        $filesize = $file_details['size'];
        // Build the file object
        $file_obj = new stdClass();
        $file_obj->filename = $name;
        $file_obj->filepath = $filename;
        $file_obj->filemime =  file_get_mimetype($name);
        $file_obj->filesize = $filesize;
        $file_obj->filesource = $name;
        $file_obj->uid = $user->uid;
        $file_obj->status = FILE_STATUS_TEMPORARY;
        $file_obj->timestamp = time();
        $file_obj->list = TRUE;
        $file_obj->data = array('description' => '');
        $file_obj->new = TRUE;

        // Save file to files table
        drupal_write_record('files', $file_obj);

        // change file status to permanent
        file_set_status($file_obj, FILE_STATUS_PERMANENT);
        dsm($file_obj, '$file_obj');
        if ($file_obj->fid) {
          $form_state['values'][$element['#field_name']][] = (array) $file_obj;
        }
        else {
          drupal_set_message("Failed to add file $filename to node: no valid fid", 'error');
        }
        $form_state['plupload_file_moved'][$i] = TRUE;
      }
    }
  }
}

/**
 * Process function for insert-enabled fields.
 */
function plupload_process($element, $edit) {
  $item = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // Not a filefield or settings yet.
  if ($field['type'] != 'filefield') {
    return $element;
  }

  if (isset($field['plupload_active_elements'])) {
    _plupload_process_resup_elements($element, $field);
  }
  return $element;
}

function _plupload_process_resup_elements(&$element, $field) {
  static $elements_processed;
  if (!isset($elements_processed)) {
    $elements_processed = array();
  }
  if (!empty($field['plupload_active_elements']) && $element['#default_value']['fid'] == 0 && !isset($elements_processed[$element['#field_name']])) {
    $elements_processed[$element['#field_name']] = TRUE;
    $session_id = session_id();
    $widget = $field['widget'];
    dsm(array('$element' => $element, '$field' => $field, '$widget' => $widget, '$elements_processed' => $elements_processed), '_plupload_process_resup_elements()');
    $base_path = base_path();
    $path = drupal_get_path('module', 'plupload');
    $extensions_setting = $max_size_setting = '';
    if ($widget['max_filesize_per_file']) {
      $max_size = parse_size($widget['max_filesize_per_file']);
      $max_size_setting = "max_file_size : '$max_size' // Maximum file size";
    }
    if ($widget['file_extensions']) {
      $extensions = str_replace(' ', ',', $widget['file_extensions']);
      $extensions_setting = "mime_types: [ {title : 'Files', extensions : '$extensions'} ] // Specify what files to browse for";
    }
    if ($extensions_setting && $max_size_setting) {
      // cf http://stackoverflow.com/questions/7246618/trailing-commas-in-javascript
      $stupid_json_comma = ',';
    }

    $field_id = str_replace('_', '-', $element['#field_name']);


    $settings = array(
                      "url" => $base_path . $path,
                      "flash" => $base_path . $path . '/js/Moxie.swf',
                      "silverlight" => $base_path . $path . '/js/Moxie.xap'
                ); 
    drupal_alter('plupload_settings', $settings); //plupload_settings_alter();
    $url =  $settings["url"];
    $plupload_settings = <<<EOD
$(function() {
  // Setup html5 version
  $("#uploader-$field_id").pluploadQueue({
    // General settings
    runtimes : 'html5,flash,silverlight', // can't send sid with html4 runtime
    url : '$url/upload.php',
    chunk_size: '1mb',
    rename : true,
    dragdrop: true,
    drop_element: true,
    filters : {
      $max_size_setting
      $stupid_json_comma
      $extensions_setting
    },
    flash_swf_url : '$flash_url',
    silverlight_xap_url : '$silverlight_url',
    multipart_params: {
      sid: '$session_id',
      field: '$field_id',
    }
  });
})(jQuery);
EOD;

    $add_more_id = 'edit-' . $field_id . '-' . $field_id . '-add-more';
    $buttons_item_id = $field_id . '-items';
    drupal_set_html_head("<style type='text/css'>input#$add_more_id, #$buttons_item_id .filefield-upload { display: none; }</style>");
    drupal_add_css($path .'/js/jquery.plupload.queue/css/jquery.plupload.queue.css');
    drupal_add_css($path .'/plupload.css');
    drupal_add_js($path .'/js/moxie.js', 'theme');
    drupal_add_js($path .'/js/plupload.full.min.js', 'theme');
    drupal_add_js($path .'/js/jquery.plupload.queue/jquery.plupload.queue.js', 'theme');
    drupal_add_js($plupload_settings, 'inline');

    $max_filesize_per_file_setting = $widget['max_filesize_per_file'] ? $widget['max_filesize_per_file'] : t('Unlimited');
    $element['#prefix'] .= '<div class="plupload-wrapper">';
    $element['#suffix'] .= t('Maximum file size: %size', array('%size' => $max_filesize_per_file_setting));
    if ($widget['file_extensions']) {
      $element['#suffix'] .= '<br />' . t('Allowed extensions: %list', array('%list' => $widget['file_extensions']));
    }
    $element['#suffix'] .= sprintf('<div id="uploader-%s"><p>%s</p></div>', $field_id, t("Your browser doesn't have Flash, Silverlight or HTML5 support."));
    $element['#suffix'] .= '</div>';

  }
}

